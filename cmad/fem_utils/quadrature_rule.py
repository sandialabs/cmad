import numpy as np
import scipy.special

class QuadratureRule():

    def __init__(self, xigauss, wgauss):
        self.xigauss = xigauss
        self.wgauss = wgauss

    def __len__(self):
        return self.xigauss.shape[0]

def create_quadrature_rule_1D(degree):
    """Creates a Gauss-Legendre quadrature on the interval [-1, 1].

    The rule can exactly integrate polynomials of degree up to
    ``degree``.

    Parameters
    ----------
    degree: Highest degree polynomial to be exactly integrated by the quadrature rule

    Returns
    -------
    A ``QuadratureRule`` named tuple containing the quadrature point coordinates
    and the weights.
    """

    n = np.ceil((degree + 1) / 2)
    xi, w = scipy.special.roots_sh_legendre(n)
    xi = -1 + 2 * xi

    xi_matrix = np.zeros((len(xi), 1))
    xi_matrix[:, 0]=xi
    return QuadratureRule(xi_matrix, w * 2)


def create_quadrature_rule_on_triangle(degree):
    """Creates a Gauss-Legendre quadrature on the unit triangle.

    The rule can exactly integrate 2D polynomials up to the value of
    ``degree``. The domain is the triangle between the vertices
    (0, 0)-(1, 0)-(0, 1). The rules here are guaranteed to be
    cyclically symmetric in triangular coordinates and to have strictly
    positive weights.

    Parameters
    ----------
    degree: Highest degree polynomial to be exactly integrated by the quadrature rule

    Returns
    -------
    A ``QuadratureRule`` named tuple containing the quadrature point coordinates
    and the weights.
    """
    if degree <= 1:
        xi = np.array([[3.33333333333333333E-01,  3.33333333333333333E-01]])

        w  = np.array([ 5.00000000000000000E-01 ])
    elif degree == 2:
        xi = np.array([[6.66666666666666667E-01,  1.66666666666666667E-01],
                        [1.66666666666666667E-01,  6.66666666666666667E-01],
                        [1.66666666666666667E-01,  1.66666666666666667E-01]])

        w  = np.array([1.66666666666666666E-01,
                        1.66666666666666667E-01,
                        1.66666666666666667E-01])
    elif degree <= 4:
        xi = np.array([[1.081030181680700E-01,  4.459484909159650E-01],
                        [4.459484909159650E-01,  1.081030181680700E-01],
                        [4.459484909159650E-01,  4.459484909159650E-01],
                        [8.168475729804590E-01,  9.157621350977100E-02],
                        [9.157621350977100E-02,  8.168475729804590E-01],
                        [9.157621350977100E-02,  9.157621350977100E-02]])

        w  = np.array([1.116907948390055E-01,
                        1.116907948390055E-01,
                        1.116907948390055E-01,
                        5.497587182766100E-02,
                        5.497587182766100E-02,
                        5.497587182766100E-02])
    elif degree <= 5:
        xi = np.array([[3.33333333333333E-01,  3.33333333333333E-01],
                        [5.97158717897700E-02,  4.70142064105115E-01],
                        [4.70142064105115E-01,  5.97158717897700E-02],
                        [4.70142064105115E-01,  4.70142064105115E-01],
                        [7.97426985353087E-01,  1.01286507323456E-01],
                        [1.01286507323456E-01,  7.97426985353087E-01],
                        [1.01286507323456E-01,  1.01286507323456E-01]])

        w = np.array([1.12500000000000E-01,
                       6.61970763942530E-02,
                       6.61970763942530E-02,
                       6.61970763942530E-02,
                       6.29695902724135E-02,
                       6.29695902724135E-02,
                       6.29695902724135E-02])
    elif degree <= 6:
        xi = np.array([[5.01426509658179E-01,  2.49286745170910E-01],
                        [2.49286745170910E-01,  5.01426509658179E-01],
                        [2.49286745170910E-01,  2.49286745170910E-01],
                        [8.73821971016996E-01,  6.30890144915020E-02],
                        [6.30890144915020E-02,  8.73821971016996E-01],
                        [6.30890144915020E-02,  6.30890144915020E-02],
                        [5.31450498448170E-02,  3.10352451033784E-01],
                        [6.36502499121399E-01,  5.31450498448170E-02],
                        [3.10352451033784E-01,  6.36502499121399E-01],
                        [5.31450498448170E-02,  6.36502499121399E-01],
                        [6.36502499121399E-01,  3.10352451033784E-01],
                        [3.10352451033784E-01,  5.31450498448170E-02]])

        w = np.array([5.83931378631895E-02,
                       5.83931378631895E-02,
                       5.83931378631895E-02,
                       2.54224531851035E-02,
                       2.54224531851035E-02,
                       2.54224531851035E-02,
                       4.14255378091870E-02,
                       4.14255378091870E-02,
                       4.14255378091870E-02,
                       4.14255378091870E-02,
                       4.14255378091870E-02,
                       4.14255378091870E-02])
    elif degree <= 10:
        xi = np.array([[0.33333333333333333E+00, 0.33333333333333333E+00],
                        [0.4269134091050342E-02,  0.49786543295447483E+00],
                        [0.49786543295447483E+00, 0.4269134091050342E-02],
                        [0.49786543295447483E+00, 0.49786543295447483E+00],
                        [0.14397510054188759E+00, 0.42801244972905617E+00],
                        [0.42801244972905617E+00, 0.14397510054188759E+00],
                        [0.42801244972905617E+00, 0.42801244972905617E+00],
                        [0.6304871745135507E+00,  0.18475641274322457E+00],
                        [0.18475641274322457E+00, 0.6304871745135507E+00],
                        [0.18475641274322457E+00, 0.18475641274322457E+00],
                        [0.9590375628566448E+00,  0.20481218571677562E-01],
                        [0.20481218571677562E-01, 0.9590375628566448E+00],
                        [0.20481218571677562E-01, 0.20481218571677562E-01],
                        [0.3500298989727196E-01,  0.1365735762560334E+00],
                        [0.1365735762560334E+00,  0.8284234338466947E+00],
                        [0.8284234338466947E+00,  0.3500298989727196E-01],
                        [0.1365735762560334E+00,  0.3500298989727196E-01],
                        [0.8284234338466947E+00,  0.1365735762560334E+00],
                        [0.3500298989727196E-01,  0.8284234338466947E+00],
                        [0.37549070258442674E-01, 0.3327436005886386E+00],
                        [0.3327436005886386E+00,  0.6297073291529187E+00],
                        [0.6297073291529187E+00,  0.37549070258442674E-01],
                        [0.3327436005886386E+00,  0.37549070258442674E-01],
                        [0.6297073291529187E+00,  0.3327436005886386E+00],
                        [0.37549070258442674E-01, 0.6297073291529187E+00]])

        w = np.array([0.4176169990259819E-01,
                       0.36149252960283717E-02,
                       0.36149252960283717E-02,
                       0.36149252960283717E-02,
                       0.3724608896049025E-01,
                       0.3724608896049025E-01,
                       0.3724608896049025E-01,
                       0.39323236701554264E-01,
                       0.39323236701554264E-01,
                       0.39323236701554264E-01,
                       0.3464161543553752E-02,
                       0.3464161543553752E-02,
                       0.3464161543553752E-02,
                       0.147591601673897E-01,
                       0.147591601673897E-01,
                       0.147591601673897E-01,
                       0.147591601673897E-01,
                       0.147591601673897E-01,
                       0.147591601673897E-01,
                       0.1978968359803062E-01,
                       0.1978968359803062E-01,
                       0.1978968359803062E-01,
                       0.1978968359803062E-01,
                       0.1978968359803062E-01,
                       0.1978968359803062E-01])
    else:
        raise ValueError("Quadrature of precision this high is not implemented.")

    return QuadratureRule(xi, w)

def create_quadrature_rule_on_quad(degree):
    """Creates a Gauss-Legendre quadrature on square.

    The rule can exactly integrate 2D polynomials up to the value of
    ``degree``. The domain is the square between the vertices
    (1, -1)-(1, 1)-(-1, 1)-(-1, -1).

    Parameters
    ----------
    degree: Highest degree polynomial to be exactly integrated by the quadrature rule

    Returns
    -------
    A ``QuadratureRule`` named tuple containing the quadrature point coordinates
    and the weights.
    """

    if degree <= 1:
        xi = np.array([[0, 0]])

        w = np.array([4])
    elif degree <= 3:
        a = 0.577350269189626
        xi = np.array([[-a, -a],
                       [a, -a],
                       [a, a],
                       [-a, a]])

        w = np.array([1, 1, 1, 1])
    elif degree <= 5:
        a = 0.774596669241483
        b = 0.888888888888889
        c = 0.555555555555556
        xi = np.array([[-a, -a],
                       [0, -a],
                       [a, -a],
                       [-a, 0],
                       [0, 0],
                       [a, 0],
                       [-a, a],
                       [0, a],
                       [a, a]])

        w = np.array([c * c, b * c, c * c, c * b,
                      b * b, c * b, c * c, b * c, c * c]) / 4

    else:
        raise ValueError("Quadrature of precision this high is not implemented.")

    return QuadratureRule(xi, w)

def create_quadrature_rule_on_tetrahedron(degree):
    if degree <= 1:
        xi = np.array([[0.25, 0.25, 0.25]])

        w = np.array([1.0/6.0])

    elif degree == 2:
        xi = np.array([[0.138196601125011, 0.138196601125011, 0.138196601125011],
                       [0.585410196624969, 0.138196601125011, 0.138196601125011],
                       [0.138196601125011, 0.585410196624969, 0.138196601125011],
                       [0.138196601125011, 0.138196601125011, 0.585410196624969]])

        w = np.array([0.25 / 6.0, 0.25 / 6.0, 0.25 / 6.0, 0.25 / 6.0])

    elif degree == 3:
        xi = np.array([[1. / 4., 1. / 4., 1. / 4.],
                       [1. / 6., 1. / 6., 1. / 6.],
                       [1. / 6., 1. / 6., 1. / 2.],
                       [1./6., 1./2., 1. / 6.],
                       [1. / 2., 1. / 6., 1. / 6.]])

        w = np.array([-2 / 15, 3 / 40, 3 / 40, 3 / 40, 3 / 40])

    elif degree == 4:
        xi = np.array([[0.25, 0.25, 0.25],
                       [0.785714285714286, 0.0714285714285714, 0.0714285714285714],
                       [0.0714285714285714, 0.0714285714285714, 0.0714285714285714],
                       [0.0714285714285714, 0.0714285714285714, 0.785714285714286],
                       [0.0714285714285714, 0.785714285714286, 0.0714285714285714],
                       [0.100596423833201, 0.399403576166799, 0.399403576166799],
                       [0.399403576166799, 0.100596423833201, 0.399403576166799],
                       [0.399403576166799, 0.399403576166799, 0.100596423833201],
                       [0.399403576166799, 0.100596423833201, 0.100596423833201],
                       [0.100596423833201, 0.399403576166799, 0.100596423833201],
                       [0.100596423833201, 0.100596423833201, 0.399403576166799]])

        w = np.array([-0.0131555555555556, 0.00762222222222222, 0.00762222222222222,
                      0.00762222222222222, 0.00762222222222222, 0.0248888888888889,
                      0.0248888888888889, 0.0248888888888889, 0.0248888888888889,
                      0.0248888888888889, 0.0248888888888889])

    elif degree == 5:
        xi = np.array([[0.25, 0.25, 0.25],
                       [0, 1. / 3., 1. / 3.],
                       [1. / 3., 1. / 3., 1. / 3.],
                       [1. / 3., 1. / 3., 0],
                       [1. / 3., 0, 1. / 3.],
                       [8. / 11., 1. / 11., 1. / 11.],
                       [1. / 11., 1. / 11., 1. / 11.],
                       [1. / 11., 1. / 11., 8. / 11.],
                       [1. / 11., 8. / 11., 1. / 11.],
                       [0.433449846426336, 0.0665501535736643, 0.0665501535736643],
                       [0.0665501535736643, 0.433449846426336, 0.0665501535736643],
                       [0.0665501535736643, 0.0665501535736643, 0.433449846426336],
                       [0.0665501535736643, 0.433449846426336, 0.433449846426336],
                       [0.433449846426336, 0.0665501535736643, 0.433449846426336],
                       [0.433449846426336, 0.433449846426336, 0.0665501535736643]])

        w = np.array([0.0302836780970892, 0.00602678571428572, 0.00602678571428572,
                      0.00602678571428572, 0.00602678571428572, 0.011645249086029,
                      0.011645249086029, 0.011645249086029, 0.011645249086029,
                      0.0109491415613865, 0.0109491415613865, 0.0109491415613865,
                      0.0109491415613865, 0.0109491415613865, 0.0109491415613865])
    elif degree == 6:
        xi = np.array([[0.356191386222545, 0.214602871259152, 0.214602871259152],
                       [0.214602871259152, 0.214602871259152, 0.214602871259152],
                       [0.214602871259152, 0.214602871259152, 0.356191386222545],
                       [0.214602871259152, 0.356191386222545, 0.214602871259152],
                       [0.877978124396166, 0.0406739585346113, 0.0406739585346113],
                       [0.0406739585346113, 0.0406739585346113, 0.0406739585346113],
                       [0.0406739585346113, 0.0406739585346113, 0.877978124396166],
                       [0.0406739585346113, 0.877978124396166, 0.0406739585346113],
                       [0.0329863295731731, 0.322337890142276, 0.322337890142276],
                       [0.322337890142276, 0.322337890142276, 0.322337890142276],
                       [0.322337890142276, 0.322337890142276, 0.0329863295731731],
                       [0.322337890142276, 0.0329863295731731, 0.322337890142276],
                       [0.269672331458316, 0.0636610018750175, 0.0636610018750175],
                       [0.0636610018750175, 0.269672331458316, 0.0636610018750175],
                       [0.0636610018750175, 0.0636610018750175, 0.269672331458316],
                       [0.603005664791649, 0.0636610018750175, 0.0636610018750175],
                       [0.0636610018750175, 0.603005664791649, 0.0636610018750175],
                       [0.0636610018750175, 0.0636610018750175, 0.603005664791649],
                       [0.0636610018750175, 0.269672331458316, 0.603005664791649],
                       [0.269672331458316, 0.603005664791649, 0.0636610018750175],
                       [0.603005664791649, 0.0636610018750175, 0.269672331458316],
                       [0.0636610018750175, 0.603005664791649, 0.269672331458316],
                       [0.269672331458316, 0.0636610018750175, 0.603005664791649],
                       [0.603005664791649, 0.269672331458316, 0.0636610018750175]])

        w = np.array([0.00665379170969465, 0.00665379170969465, 0.00665379170969465,
                      0.00665379170969465, 0.00167953517588678, 0.00167953517588678,
                      0.00167953517588678, 0.00167953517588678, 0.0092261969239424,
                      0.0092261969239424, 0.0092261969239424, 0.0092261969239424,
                      0.00803571428571428, 0.00803571428571428, 0.00803571428571428,
                      0.00803571428571428, 0.00803571428571428, 0.00803571428571428,
                      0.00803571428571428, 0.00803571428571428, 0.00803571428571428,
                      0.00803571428571428, 0.00803571428571428, 0.00803571428571428])
    else:
        raise ValueError("Quadrature of precision this high is not implemented.")

    return QuadratureRule(xi, w)
